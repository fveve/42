Language: Markdown

Additional service : jekyll

Pourquoi les développeurs utilisent Docker ? 🤔

Le grand avantage de Docker est la possibilité de modéliser chaque conteneur sous la forme d'une image que l'on peut stocker localement.


🔎 Un conteneur est une machine virtuelle sans noyau.

📌 Ce que j’appelle noyau est tout l’ensemble du système permettant à la machine virtuelle de fonctionner, l’OS, le coté graphique, réseau, etc…

🔎 En d’autres termes, un conteneur ne contient que l’application et les dépendances de l’application.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


						FROM		alpine:3.12

						RUN			apk update && apk upgrade && apk add	\
													openssl			\
													nginx			\
													curl			\
													vim				\
													sudo

						RUN			rm -f /etc/nginx/nginx.conf

						COPY		./config/nginx.conf /etc/nginx/nginx.conf
						COPY		scripts/setup_nginx.sh /setup_nginx.sh

						RUN			chmod -R +x /setup_nginx.sh

						EXPOSE		443

						ENTRYPOINT	["sh", "setup_nginx.sh"
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Quelques mots-clefs Dockerfile:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FROM
Permet d’indiquer à Docker sous quel OS doit tourner votre machine virtuelle.

C’est le premier mot clef de votre Dockerfile et celui ci est obligatoire.

Les plus courants sont debian:buster pour Debian ou alpine:x:xx pour Linux.

RUN
Permet de lancer une commande sur votre machine virtuelle

💡
L’équivalent de se connecter en ssh, puis de taper une commande bash, comme : echo “Hello World!”, qui affichera….
En général, les premiers RUN fournit dans le Dockerfile consistent à mettre à jour les ressources de votre VM, comme apk, ou encore d’ajouter les utilitaires basiques comme vim, curl ou sudo.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

COPY
Vous l’avez ! Cela permet en effet de copier un fichier.

Le copier ? À partir d’ou ?
Vous indiquez simplement ou se trouve votre fichier à copier à partir du répertoire ou se trouve votre Dockerfile, puis la ou vous souhaitez le copier dans votre machine virtuelle.

💡
Une image docker c’est un dossier, il contient obligatoirement votre Dockerfile à la racine du dossier mais peut aussi contenir un tas d’autres fichiers pour ensuite pouvoir les copier directement dans votre VM.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXPOSE
Ici, c’est une question de réseau 📡

L'instruction EXPOSE informe Docker que le conteneur écoute sur les ports réseaux spécifiés au moment de l'exécution. EXPOSE ne rend pas les ports du conteneur accessibles à l'hôte.

Attendez ! Quoi ? Le conteneur écoute sur le port réseau et n'est pas accessible à l'hôte ?

Qu'est-ce que cela signifie ? 😣

L'instruction EXPOSE expose le port spécifié et le rend disponible uniquement pour la communication entre conteneurs. Comprenons cela à l'aide d'un exemple.

Disons que nous avons deux conteneurs, une application wordpress et un serveur mariadb. Notre application wordpress a besoin de communiquer avec le serveur mariadb pour plusieurs raisons.


Pour que l'application WordPress puisse parler au serveur MariaDB, le conteneur WordPress doit exposer le port. Jetez un œil au Dockerfile de l'image officielle de wordpress et vous verrez une ligne disant EXPOSE3306. C'est ce qui aide les deux conteneurs à communiquer l'un avec l'autre.

Ainsi, lorsque votre conteneur WordPress essaie de se connecter au port 3306 du conteneur MariaDB, c'est l'instruction EXPOSE qui rend cela possible.

Note : Pour que le serveur WordPress puisse communiquer avec le conteneur MariaDB, il est important que les deux conteneurs soient exécutés dans le même réseau docker.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ENTRYPOINT
Youpi ! Votre container semble prêt à démarrer.

Cependant il serait surement plus judicieux de demander au container de lancer une certaine commande au lancement de celui-ci.

C’est ce que permet de faire le mot-clef ENTRYPOINT !

Il suffit d’indiquer votre commande, argument par argument, dans le format suivant :

[ENTRYPOINT “bash” , ”-c”, “"$(curl https://grademe.fr )"” ]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Docker-Compose :
Maintenant que vous avez compris la réelle utilité de Docker, il s’agit de comprendre une fonctionnalité de Docker appelée Compose.


📄 Voici ce qu’explique la doc de Docker sur Compose:

Docker Compose est un outil qui a été développé pour aider à définir et à partager des applications multi-conteneurs.
Avec Compose, nous pouvons créer un fichier YAML pour définir les services et, à l'aide d'une seule commande, tout mettre en route ou tout démonter.

💡
Compose permettrait donc de gérer des applications qui utilisent plusieurs containers et de communiquer entre eux.

Maintenant c’est certain, le projet consiste à relier plusieurs image Docker, et pouvoir les lancer ensemble, sans pour autant, qu’elles perdent leur indépendance.

Tout ca grace à Docker-Compose qui est prévu pour ce genre d’utilisation.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Les volumes Compose présentent plusieurs avantages comme pouvoir être gérés à l'aide des commandes de la CLI de Docker ou de son API ou encore pouvoir être partagés de manière plus sûre entre plusieurs conteneurs.

+ d’info sur la doc de Docker ici
https://docs.docker.com/storage/volumes/

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Les commandes essentielles d’un container Docker :

Un container Docker doit être build avant d’être lancé.

C’est pendant le build que vous pourrez obtenir des infos sur des potentielles erreurs que vous auriez fait dans le Dockerfile.

💡
Chaque commande Docker commence par le mot clef docker

Build un container Docker :     docker build

Un container Docker doit être build avant d’être lancé.

C’est pendant le build que vous pourrez obtenir des infos sur des potentielles erreurs que vous auriez fait dans le Dockerfile.

💡
Chaque commande Docker commence par le mot clef docker

Build un container Docker :     docker build

😵 J'espère que vous n’oseriez pas tenter cette commande sans l’avoir parfaitement comprise !

🤪 De toute manière, la commande n’est pas fonctionnelle, docker demande obligatoirement un chemin ou se trouve le Dockerfile de l’image à build.

Dans notre cas, ce serait docker build srcs/requirements/nginx/

Ou encore plus simple, docker build . en vous trouvant directement dans le dossier NGINX.

Vous pouvez également préciser un nom à votre build, avec le flag -t

Exemple : docker build -t nginx .

💡
Si vous obtenez une erreur de type Cannot connect to the Docker daemon, vérifiez que Docker est bien ouvert et qu’il fonctionne.

Connaitre les images actuelles (après un build réussi) :    docker image ls

🥳 Vous devriez visualiser votre première image !

😕 Cependant celle ci n’a pas de nom en dessous de REPOSITORY, il est indiqué <none>, meme si on peut relier cette image à son ID présent dans la quatrième colonne, le sujet nous demande que le nom de l’image porte le nom du container associé, ici NGINX.

Et on peut faire cela ! Il suffit simplement de préciser quand on build l’image, son nom, grace au flag -t

Démarrer une image (run) :     docker run <image_name>

📌 Vous devrez indiquer le nom de votre image à run.

👉 En précisant -it avant le nom de votre image, vous accéderez directement au terminal de votre container à son lancement.

Connaitre les containers actuellement lancés :     docker ps

👉 Vous pouvez même obtenir les containers Docker stoppés en rajoutant le flag -a

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

docker run -it --rm <name> /bin/bash
